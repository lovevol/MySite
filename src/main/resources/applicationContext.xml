<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:rabbit="http://www.springframework.org/schema/rabbit"
       xmlns:mongo="http://www.springframework.org/schema/data/mongo"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/cache
       http://www.springframework.org/schema/cache/spring-cache.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc.xsd
       http://www.springframework.org/schema/rabbit
       http://www.springframework.org/schema/rabbit/spring-rabbit.xsd
       http://www.springframework.org/schema/data/mongo
       http://www.springframework.org/schema/data/mongo/spring-mongo-1.0.xsd"

       default-autowire="byName">
    <!--<bean class="org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator"/>-->
    <!-- 引入jedis的properties配置文件 -->
    <!--如果你有多个数据源需要通过<context:property-placeholder管理，且不愿意放在一个配置文件里，那么一定要加上ignore-unresolvable=“true"-->
    <context:property-placeholder location="classpath:jedis.properties" ignore-unresolvable="true" />
    <context:property-placeholder location="classpath:db.properties" ignore-unresolvable="true"/><!--加载数据源配置-->
    <!--开启注解配置-->
    <context:annotation-config/>
    <!--自动扫描-->
    <context:component-scan base-package="dao"/>
    <context:component-scan base-package="service"/>
    <context:component-scan base-package="PagingPlugin"/>
    <context:component-scan base-package="redis"/>
    <context:component-scan base-package="mongodb"/>
    <context:component-scan base-package="rabbitmq"/>
    <context:component-scan base-package="mapper" use-default-filters="false">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Repository"/>
    </context:component-scan>
    <!--<bean id="propertyConfig" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:db.properties</value>
            </list>
        </property>
    </bean>-->
    <!--数据源-->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="username" value="mysite"/>
        <property name="password" value="123456"/>
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://120.24.4.136:3306/mysitedb?useUnicode=true&amp;characterEncoding=UTF-8"/>
        <!--<property name="username" value="root"/>
        <property name="password" value=""/>
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://127.0.0.1:3306/mysitedb?useUnicode=true&amp;characterEncoding=UTF-8"/>-->
    </bean>
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean" scope="prototype">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!--分页插件-->
        <property name="plugins">
            <array>
                <bean class="PagingPlugin.PagingPlugin">                                                                                                          <property name="properties">                                                                                                                                          <value>  property-key=property-value </value>
                </property>
                </bean>
            </array>
        </property>
    </bean>
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory"/>
    </bean>
    <!--事务管理-->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"/>
    <tx:annotation-driven transaction-manager="txManager"/>
    <!--mybatis的Mapper配置扫描-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionTemplateBeanName" value="sqlSessionTemplate"/>
        <property name="basePackage" value="mapper"/>
        <property name="annotationClass" value="org.springframework.stereotype.Repository"/>
    </bean>

    <!--redis-->

    <!--Jedis连接池的相关配置-->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <!--新版是maxTotal，旧版是maxActive-->
        <property name="maxTotal" value="${redis.pool.maxActive}"/>
        <property name="maxIdle" value="${redis.pool.maxIdle}"/>
        <property name="testOnBorrow" value="true"/>
        <property name="testOnReturn" value="true"/>
    </bean>

    <bean id="jedisPool" class="redis.clients.jedis.JedisPool">
        <constructor-arg name="poolConfig" ref="jedisPoolConfig" />
        <constructor-arg name="host" value="${redis.host}" />
        <constructor-arg name="port" value="${redis.port}" type="int" />
        <constructor-arg name="timeout" value="${redis.timeout}" type="int" />
        <constructor-arg name="password" value="${redis.password}" />
        <constructor-arg name="database" value="${redis.database}" type="int" />
    </bean>
    <!--<mongo:mongo-client id="mongoClient" host="${mongo.host}" port="${mongo.port}" credentials="${mongo.name}"/>-->
    <!-- 一些连接属性的设置 -->
    <!--<mongo:mongo id="mongo" host="${mongo.host}" port="${mongo.port}">
        <mongo:options connections-per-host="${mongo.options.connections-per-host}"
                       threads-allowed-to-block-for-connection-multiplier="${mongo.options.threads-allowed-to-block-for-connection-multiplier}"
                       connect-timeout="${mongo.options.connect-timeout}"
                       max-wait-time="${mongo.options.max-wait-time}"
                       auto-connect-retry="${mongo.options.auto-connect-retry}"
                       socket-keep-alive="${mongo.options.socket-keep-alive}"
                       socket-timeout="${mongo.options.socket-timeout}"
                       slave-ok="${mongo.options.slave-ok}"
                       write-number="${mongo.options.write-number}"
                       write-timeout="${mongo.options.write-timeout}"
                       write-fsync="${mongo.options.write-fsync}"/>
    </mongo:mongo>
    <mongo:db-factory id="mongoDbFactory" dbname="${mongo.name}" mongo-ref="mongo"/>
    <bean id="mongoTemplate" class="org.springframework.data.mongodb.core.MongoTemplate">
        <constructor-arg ref="mongoDbFactory" />
    </bean>
    &lt;!&ndash;实体映射自动扫描注入的包&ndash;&gt;
    <mongo:mapping-converter>
        <mongo:custom-converters base-package="mongodb" />
    </mongo:mapping-converter>-->

    <!--错误处理-->
    <bean class="util.MyExceptionResolver"/>

    <!-- 连接配置 -->
    <rabbit:connection-factory id="connectionFactory" host="${mq.host}" username="${mq.username}"
                               password="${mq.password}" port="${mq.port}"  />

    <rabbit:admin connection-factory="connectionFactory"/>
    <!--声明一个 RabbitMQ Template-->
    <rabbit:template id="amqpTemplate" exchange="${mq.queue}_exchange" connection-factory="connectionFactory"  />
    <!--在 applicationContext.xml 中声明一个交换机-->
    <rabbit:topic-exchange name="${mq.queue}_exchange" durable="true" auto-delete="false">
        <rabbit:bindings>
            <rabbit:binding queue="test_queue" pattern="test_queue"/>
        </rabbit:bindings>
    </rabbit:topic-exchange>
    <!--在 applicationContext.xml 中声明一个队列。-->
    <rabbit:queue id="test_queue" name="test_queue" durable="true" auto-delete="false" exclusive="false" />

    <!-- 消费者 -->
    <bean name="rabbitmqService" class="rabbitmq.Consumer"/>
    <bean name="consumerA" class="rabbitmq.ConsumerA"/>
    <bean name="consumerB" class="rabbitmq.ConsumerB"/>
    <!-- 配置监听 -->
    <rabbit:listener-container connection-factory="connectionFactory" acknowledge="auto">
        <!--<rabbit:listener queues="test_queue" ref="rabbitmqService"/>-->
        <rabbit:listener ref="consumerA" queues="test_queue"/>
        <rabbit:listener ref="consumerB" queues="test_queue"/>
    </rabbit:listener-container>
</beans>